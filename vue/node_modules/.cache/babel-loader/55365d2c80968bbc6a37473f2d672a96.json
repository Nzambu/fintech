{"remainingRequest":"/var/www/html/fintech/vue/node_modules/babel-loader/lib/index.js!/var/www/html/fintech/vue/node_modules/eslint-loader/index.js??ref--13-0!/var/www/html/fintech/vue/src/store/TransactionModule.js","dependencies":[{"path":"/var/www/html/fintech/vue/src/store/TransactionModule.js","mtime":1613741287980},{"path":"/var/www/html/fintech/vue/node_modules/cache-loader/dist/cjs.js","mtime":1613550007784},{"path":"/var/www/html/fintech/vue/node_modules/babel-loader/lib/index.js","mtime":1613550007128},{"path":"/var/www/html/fintech/vue/node_modules/eslint-loader/index.js","mtime":1613550008940}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgVHJhbnNhY3Rpb25TZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL1RyYW5zYWN0aW9uU2VydmljZSc7CnZhciBpbml0aWFsU3RhdGUgPSB7CiAgbGlzdDogW10sCiAgc3RhdHVzOiBbXSwKICB0eXBlczogW10sCiAgbWV0aG9kczogW10KfTsKZXhwb3J0IHZhciB0cmFuc2FjdGlvbiA9IHsKICBuYW1lc3BhY2VkOiB0cnVlLAogIHN0YXRlOiBpbml0aWFsU3RhdGUsCiAgYWN0aW9uczogewogICAgLyoqCiAgICAgKiBHZXQgdHJhbnNhY3Rpb25zIGxpc3QKICAgICAqIAogICAgICovCiAgICBsaXN0OiBmdW5jdGlvbiBsaXN0KF9yZWYpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICByZXR1cm4gVHJhbnNhY3Rpb25TZXJ2aWNlLmdldFRyYW5zYWN0aW9uTGlzdCgpLnRoZW4oZnVuY3Rpb24gKGZlZWRiYWNrKSB7CiAgICAgICAgY29tbWl0KCd0cmFuc2FjdGlvbkxpc3QnLCBmZWVkYmFjay5kYXRhKTsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZlZWRiYWNrKTsKICAgICAgfSwgZnVuY3Rpb24gKGZhaWwpIHsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZmFpbCk7CiAgICAgIH0pOwogICAgfSwKCiAgICAvKioKICAgICAqIENyZWF0ZSB0cmFuc2FjdGlvbgogICAgICovCiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShfcmVmMiwgdHJhbnNhY3Rpb24pIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uU2VydmljZS5jcmVhdGVUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikudGhlbihmdW5jdGlvbiAoZmVlZGJhY2spIHsKICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBmZWVkYmFjay5kYXRhOwogICAgICAgIGNvbW1pdCgnY3JlYXRlZFRyYW5zYWN0aW9uJywgdHJhbnNhY3Rpb24pOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmVlZGJhY2spOwogICAgICB9LCBmdW5jdGlvbiAoZmFpbCkgewogICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChmYWlsKTsKICAgICAgfSk7CiAgICB9LAoKICAgIC8qKgogICAgICogVXBkYXRlIHRyYW5zYWN0aW9uCiAgICAgKi8KICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKF9yZWYzLCB0cmFuc2FjdGlvbikgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjMuY29tbWl0OwogICAgICByZXR1cm4gVHJhbnNhY3Rpb25TZXJ2aWNlLnVwZGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKS50aGVuKGZ1bmN0aW9uIChmZWVkYmFjaykgewogICAgICAgIHZhciB0cmFuc2FjdGlvbiA9IGZlZWRiYWNrLmRhdGE7CiAgICAgICAgY29tbWl0KCd1cGRhdGVkVHJhbnNhY3Rpb24nLCB0cmFuc2FjdGlvbik7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmZWVkYmFjayk7CiAgICAgIH0sIGZ1bmN0aW9uIChmYWlsKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGZhaWwpOwogICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBEZWxldGUgdHJhbnNhY3Rpb24KICAgICAqLwogICAgZGVsZXRlOiBmdW5jdGlvbiBfZGVsZXRlKF9yZWY0LCB0cmFuc2FjdGlvbikgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjQuY29tbWl0OwogICAgICByZXR1cm4gVHJhbnNhY3Rpb25TZXJ2aWNlLmRlbGV0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uLmlkKS50aGVuKGZ1bmN0aW9uIChmZWVkYmFjaykgewogICAgICAgIHZhciB0cmFuc2FjdGlvbiA9IGZlZWRiYWNrLmRhdGE7CiAgICAgICAgY29tbWl0KCdkZWxldGVkVHJhbnNhY3Rpb24nLCB0cmFuc2FjdGlvbi5pZCk7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmZWVkYmFjayk7CiAgICAgIH0sIGZ1bmN0aW9uIChmYWlsKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGZhaWwpOwogICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBHZXQgdHJhbnNhY3Rpb25zCiAgICAgKiAKICAgICAqLwogICAgc3RhdHVzOiBmdW5jdGlvbiBzdGF0dXMoX3JlZjUpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWY1LmNvbW1pdDsKICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uU2VydmljZS5nZXRUcmFuc2FjdGlvblN0YXR1cygpLnRoZW4oZnVuY3Rpb24gKGZlZWRiYWNrKSB7CiAgICAgICAgY29tbWl0KCd0cmFuc2FjdGlvblN0YXR1cycsIGZlZWRiYWNrLmRhdGEpOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmVlZGJhY2spOwogICAgICB9LCBmdW5jdGlvbiAoZmFpbCkgewogICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChmYWlsKTsKICAgICAgfSk7CiAgICB9LAoKICAgIC8qKgogICAgICogR2V0IHRyYW5zYWN0aW9uIHR5cGVzCiAgICAgKiAKICAgICAqLwogICAgdHlwZXM6IGZ1bmN0aW9uIHR5cGVzKF9yZWY2KSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmNi5jb21taXQ7CiAgICAgIHJldHVybiBUcmFuc2FjdGlvblNlcnZpY2UuZ2V0VHJhbnNhY3Rpb25UeXBlcygpLnRoZW4oZnVuY3Rpb24gKGZlZWRiYWNrKSB7CiAgICAgICAgY29tbWl0KCd0cmFuc2FjdGlvblR5cGVzJywgZmVlZGJhY2suZGF0YSk7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmZWVkYmFjayk7CiAgICAgIH0sIGZ1bmN0aW9uIChmYWlsKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGZhaWwpOwogICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBHZXQgdHJhbnNhY3Rpb24gbWV0aG9kcwogICAgICogCiAgICAgKi8KICAgIG1ldGhvZHM6IGZ1bmN0aW9uIG1ldGhvZHMoX3JlZjcpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWY3LmNvbW1pdDsKICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uU2VydmljZS5nZXRUcmFuc2FjdGlvbk1ldGhvZHMoKS50aGVuKGZ1bmN0aW9uIChmZWVkYmFjaykgewogICAgICAgIGNvbW1pdCgndHJhbnNhY3Rpb25NZXRob2RzJywgZmVlZGJhY2suZGF0YSk7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmZWVkYmFjayk7CiAgICAgIH0sIGZ1bmN0aW9uIChmYWlsKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGZhaWwpOwogICAgICB9KTsKICAgIH0KICB9LAogIG11dGF0aW9uczogewogICAgLyoqCiAgICAgKiBTdG9yZSB0cmFuc2FjdGlvbiBsaXN0CiAgICAgKiAKICAgICAqLwogICAgdHJhbnNhY3Rpb25MaXN0OiBmdW5jdGlvbiB0cmFuc2FjdGlvbkxpc3Qoc3RhdGUsIGxpc3QpIHsKICAgICAgc3RhdGUubGlzdCA9IGxpc3Q7CiAgICB9LAoKICAgIC8qKgogICAgICogU3RvcmUgY3JlYXRlZCB0cmFuc2FjdGlvbgogICAgKi8KICAgIGNyZWF0ZWRUcmFuc2FjdGlvbjogZnVuY3Rpb24gY3JlYXRlZFRyYW5zYWN0aW9uKHN0YXRlLCB0cmFuc2FjdGlvbikgewogICAgICBzdGF0ZS5saXN0LnB1c2godHJhbnNhY3Rpb24pOwogICAgfSwKCiAgICAvKioKICAgICAqIFVwZGF0ZSB0cmFuc2FjdGlvbgogICAgICovCiAgICB1cGRhdGVkVHJhbnNhY3Rpb246IGZ1bmN0aW9uIHVwZGF0ZWRUcmFuc2FjdGlvbihzdGF0ZSwgX3VwZGF0ZWRUcmFuc2FjdGlvbikgewogICAgICB2YXIgdHJhbnNhY3Rpb25JbmRleCA9IHN0YXRlLmxpc3QuZmluZEluZGV4KGZ1bmN0aW9uICh0cmFuc2FjdGlvbikgewogICAgICAgIHJldHVybiB0cmFuc2FjdGlvbi5pZCA9PT0gX3VwZGF0ZWRUcmFuc2FjdGlvbi5pZDsKICAgICAgfSk7CgogICAgICBpZiAodHJhbnNhY3Rpb25JbmRleCAhPT0gLTEpIHsKICAgICAgICBzdGF0ZS5saXN0LnNwbGljZSh0cmFuc2FjdGlvbkluZGV4LCAxLCBfdXBkYXRlZFRyYW5zYWN0aW9uKTsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIFJlbW92ZSBkZWxldGVkIHRyYW5zYWN0aW9uCiAgICAgKi8KICAgIGRlbGV0ZWRUcmFuc2FjdGlvbjogZnVuY3Rpb24gZGVsZXRlZFRyYW5zYWN0aW9uKHN0YXRlLCB0cmFuc2FjdGlvbklEKSB7CiAgICAgIHZhciB0cmFuc2FjdGlvbkluZGV4ID0gc3RhdGUubGlzdC5maW5kSW5kZXgoZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uLmlkID09PSB0cmFuc2FjdGlvbklEOwogICAgICB9KTsKICAgICAgc3RhdGUubGlzdC5zcGxpY2UodHJhbnNhY3Rpb25JbmRleCwgMSk7CiAgICB9LAoKICAgIC8qKgogICAgICogU3RvcmUgdHJhbnNhY3Rpb24gc3RhdHVzCiAgICAgKiAKICAgICAqLwogICAgdHJhbnNhY3Rpb25TdGF0dXM6IGZ1bmN0aW9uIHRyYW5zYWN0aW9uU3RhdHVzKHN0YXRlLCBsaXN0KSB7CiAgICAgIHN0YXRlLnN0YXR1cyA9IGxpc3Q7CiAgICB9LAoKICAgIC8qKgogICAgICogU3RvcmUgdHJhbnNhY3Rpb24gdHlwZXMKICAgICAqIAogICAgICovCiAgICB0cmFuc2FjdGlvblR5cGVzOiBmdW5jdGlvbiB0cmFuc2FjdGlvblR5cGVzKHN0YXRlLCBsaXN0KSB7CiAgICAgIHN0YXRlLnR5cGVzID0gbGlzdDsKICAgIH0sCgogICAgLyoqCiAgICAgKiBTdG9yZSB0cmFuc2FjdGlvbiBtZXRob2RzCiAgICAgKiAKICAgICAqLwogICAgdHJhbnNhY3Rpb25NZXRob2RzOiBmdW5jdGlvbiB0cmFuc2FjdGlvbk1ldGhvZHMoc3RhdGUsIGxpc3QpIHsKICAgICAgc3RhdGUubWV0aG9kcyA9IGxpc3Q7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["/var/www/html/fintech/vue/src/store/TransactionModule.js"],"names":["TransactionService","initialState","list","status","types","methods","transaction","namespaced","state","actions","commit","getTransactionList","then","feedback","data","Promise","resolve","fail","reject","create","createTransaction","update","updateTransaction","delete","deleteTransaction","id","getTransactionStatus","getTransactionTypes","getTransactionMethods","mutations","transactionList","createdTransaction","push","updatedTransaction","transactionIndex","findIndex","splice","deletedTransaction","transactionID","transactionStatus","transactionTypes","transactionMethods"],"mappings":";;;AAAA,OAAOA,kBAAP,MAA+B,gCAA/B;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAG,EADU;AAEjBC,EAAAA,MAAM,EAAG,EAFQ;AAGjBC,EAAAA,KAAK,EAAG,EAHS;AAIjBC,EAAAA,OAAO,EAAG;AAJO,CAArB;AAOA,OAAO,IAAMC,WAAW,GAAG;AACvBC,EAAAA,UAAU,EAAE,IADW;AAEvBC,EAAAA,KAAK,EAAEP,YAFgB;AAGvBQ,EAAAA,OAAO,EAAE;AAEL;AACR;AACA;AACA;AACQP,IAAAA,IANK,sBAMY;AAAA,UAAVQ,MAAU,QAAVA,MAAU;AACb,aAAOV,kBAAkB,CAACW,kBAAnB,GAAwCC,IAAxC,CACH,UAAAC,QAAQ,EAAI;AACRH,QAAAA,MAAM,CAAC,iBAAD,EAAoBG,QAAQ,CAACC,IAA7B,CAAN;AACA,eAAOC,OAAO,CAACC,OAAR,CAAgBH,QAAhB,CAAP;AACH,OAJE,EAKH,UAAAI,IAAI,EAAI;AACJ,eAAOF,OAAO,CAACG,MAAR,CAAeD,IAAf,CAAP;AACH,OAPE,CAAP;AASH,KAhBI;;AAkBL;AACR;AACA;AACQE,IAAAA,MArBK,yBAqBcb,WArBd,EAqB2B;AAAA,UAAvBI,MAAuB,SAAvBA,MAAuB;AAC5B,aAAOV,kBAAkB,CAACoB,iBAAnB,CAAqCd,WAArC,EAAkDM,IAAlD,CACH,UAAAC,QAAQ,EAAI;AACR,YAAIP,WAAW,GAAGO,QAAQ,CAACC,IAA3B;AACAJ,QAAAA,MAAM,CAAC,oBAAD,EAAuBJ,WAAvB,CAAN;AACA,eAAOS,OAAO,CAACC,OAAR,CAAgBH,QAAhB,CAAP;AACH,OALE,EAMH,UAAAI,IAAI,EAAI;AACJ,eAAOF,OAAO,CAACG,MAAR,CAAeD,IAAf,CAAP;AACH,OARE,CAAP;AAUH,KAhCI;;AAkCL;AACR;AACA;AACQI,IAAAA,MArCK,yBAqCcf,WArCd,EAqC2B;AAAA,UAAvBI,MAAuB,SAAvBA,MAAuB;AAC5B,aAAOV,kBAAkB,CAACsB,iBAAnB,CAAqChB,WAArC,EAAkDM,IAAlD,CACH,UAAAC,QAAQ,EAAI;AACR,YAAIP,WAAW,GAAGO,QAAQ,CAACC,IAA3B;AACAJ,QAAAA,MAAM,CAAC,oBAAD,EAAuBJ,WAAvB,CAAN;AACA,eAAOS,OAAO,CAACC,OAAR,CAAgBH,QAAhB,CAAP;AACH,OALE,EAMH,UAAAI,IAAI,EAAI;AACJ,eAAOF,OAAO,CAACG,MAAR,CAAeD,IAAf,CAAP;AACH,OARE,CAAP;AAUH,KAhDI;;AAkDL;AACR;AACA;AACQM,IAAAA,MArDK,0BAqDcjB,WArDd,EAqD2B;AAAA,UAAvBI,MAAuB,SAAvBA,MAAuB;AAC5B,aAAOV,kBAAkB,CAACwB,iBAAnB,CAAqClB,WAAW,CAACmB,EAAjD,EAAqDb,IAArD,CACH,UAAAC,QAAQ,EAAI;AACR,YAAIP,WAAW,GAAGO,QAAQ,CAACC,IAA3B;AACAJ,QAAAA,MAAM,CAAC,oBAAD,EAAuBJ,WAAW,CAACmB,EAAnC,CAAN;AACA,eAAOV,OAAO,CAACC,OAAR,CAAgBH,QAAhB,CAAP;AACH,OALE,EAMH,UAAAI,IAAI,EAAI;AACJ,eAAOF,OAAO,CAACG,MAAR,CAAeD,IAAf,CAAP;AACH,OARE,CAAP;AAUH,KAhEI;;AAkEL;AACR;AACA;AACA;AACQd,IAAAA,MAtEK,yBAsEc;AAAA,UAAVO,MAAU,SAAVA,MAAU;AACf,aAAOV,kBAAkB,CAAC0B,oBAAnB,GAA0Cd,IAA1C,CACH,UAAAC,QAAQ,EAAI;AACRH,QAAAA,MAAM,CAAC,mBAAD,EAAsBG,QAAQ,CAACC,IAA/B,CAAN;AACA,eAAOC,OAAO,CAACC,OAAR,CAAgBH,QAAhB,CAAP;AACH,OAJE,EAKH,UAAAI,IAAI,EAAI;AACJ,eAAOF,OAAO,CAACG,MAAR,CAAeD,IAAf,CAAP;AACH,OAPE,CAAP;AASH,KAhFI;;AAkFL;AACR;AACA;AACA;AACQb,IAAAA,KAtFK,wBAsFa;AAAA,UAAVM,MAAU,SAAVA,MAAU;AACd,aAAOV,kBAAkB,CAAC2B,mBAAnB,GAAyCf,IAAzC,CACH,UAAAC,QAAQ,EAAI;AACRH,QAAAA,MAAM,CAAC,kBAAD,EAAqBG,QAAQ,CAACC,IAA9B,CAAN;AACA,eAAOC,OAAO,CAACC,OAAR,CAAgBH,QAAhB,CAAP;AACH,OAJE,EAKH,UAAAI,IAAI,EAAI;AACJ,eAAOF,OAAO,CAACG,MAAR,CAAeD,IAAf,CAAP;AACH,OAPE,CAAP;AASH,KAhGI;;AAkGL;AACR;AACA;AACA;AACQZ,IAAAA,OAtGK,0BAsGe;AAAA,UAAVK,MAAU,SAAVA,MAAU;AAChB,aAAOV,kBAAkB,CAAC4B,qBAAnB,GAA2ChB,IAA3C,CACH,UAAAC,QAAQ,EAAI;AACRH,QAAAA,MAAM,CAAC,oBAAD,EAAuBG,QAAQ,CAACC,IAAhC,CAAN;AACA,eAAOC,OAAO,CAACC,OAAR,CAAgBH,QAAhB,CAAP;AACH,OAJE,EAKH,UAAAI,IAAI,EAAI;AACJ,eAAOF,OAAO,CAACG,MAAR,CAAeD,IAAf,CAAP;AACH,OAPE,CAAP;AASH;AAhHI,GAHc;AAsHvBY,EAAAA,SAAS,EAAE;AAEP;AACR;AACA;AACA;AACQC,IAAAA,eANO,2BAMStB,KANT,EAMgBN,IANhB,EAMsB;AAC1BM,MAAAA,KAAK,CAACN,IAAN,GAAaA,IAAb;AACF,KARM;;AAUP;AACR;AACA;AACO6B,IAAAA,kBAbQ,8BAaWvB,KAbX,EAakBF,WAblB,EAa+B;AAClCE,MAAAA,KAAK,CAACN,IAAN,CAAW8B,IAAX,CAAgB1B,WAAhB;AACJ,KAfO;;AAiBP;AACR;AACA;AACQ2B,IAAAA,kBApBO,8BAoBYzB,KApBZ,EAoBmByB,mBApBnB,EAoBuC;AAC1C,UAAIC,gBAAgB,GAAG1B,KAAK,CAACN,IAAN,CAAWiC,SAAX,CAAqB,UAAA7B,WAAW;AAAA,eAAIA,WAAW,CAACmB,EAAZ,KAAmBQ,mBAAkB,CAACR,EAA1C;AAAA,OAAhC,CAAvB;;AACA,UAAGS,gBAAgB,KAAK,CAAC,CAAzB,EAA4B;AACxB1B,QAAAA,KAAK,CAACN,IAAN,CAAWkC,MAAX,CAAkBF,gBAAlB,EAAoC,CAApC,EAAuCD,mBAAvC;AACH;AACJ,KAzBM;;AA2BP;AACR;AACA;AACQI,IAAAA,kBA9BO,8BA8BY7B,KA9BZ,EA8BmB8B,aA9BnB,EA8BkC;AACrC,UAAIJ,gBAAgB,GAAG1B,KAAK,CAACN,IAAN,CAAWiC,SAAX,CAAqB,UAAA7B,WAAW;AAAA,eAAIA,WAAW,CAACmB,EAAZ,KAAmBa,aAAvB;AAAA,OAAhC,CAAvB;AACA9B,MAAAA,KAAK,CAACN,IAAN,CAAWkC,MAAX,CAAkBF,gBAAlB,EAAoC,CAApC;AACH,KAjCM;;AAmCP;AACR;AACA;AACA;AACQK,IAAAA,iBAvCO,6BAuCW/B,KAvCX,EAuCkBN,IAvClB,EAuCwB;AAC3BM,MAAAA,KAAK,CAACL,MAAN,GAAeD,IAAf;AACH,KAzCM;;AA2CP;AACR;AACA;AACA;AACQsC,IAAAA,gBA/CO,4BA+CUhC,KA/CV,EA+CiBN,IA/CjB,EA+CuB;AAC1BM,MAAAA,KAAK,CAACJ,KAAN,GAAcF,IAAd;AACH,KAjDM;;AAmDP;AACR;AACA;AACA;AACQuC,IAAAA,kBAvDO,8BAuDYjC,KAvDZ,EAuDmBN,IAvDnB,EAuDyB;AAC5BM,MAAAA,KAAK,CAACH,OAAN,GAAgBH,IAAhB;AACH;AAzDM;AAtHY,CAApB","sourcesContent":["import TransactionService from '../services/TransactionService';\n\nconst initialState = {\n    list : [],\n    status : [],\n    types : [],\n    methods : [],\n}\n\nexport const transaction = {\n    namespaced: true,\n    state: initialState,\n    actions: {\n        \n        /**\n         * Get transactions list\n         * \n         */\n        list({ commit }) {\n            return TransactionService.getTransactionList().then(\n                feedback => {\n                    commit('transactionList', feedback.data)\n                    return Promise.resolve(feedback)\n                },\n                fail => {\n                    return Promise.reject(fail)\n                }\n            );            \n        },\n\n        /**\n         * Create transaction\n         */\n        create({ commit }, transaction) {\n            return TransactionService.createTransaction(transaction).then(\n                feedback => {\n                    let transaction = feedback.data;\n                    commit('createdTransaction', transaction);\n                    return Promise.resolve(feedback);\n                },\n                fail => {\n                    return Promise.reject(fail);\n                }\n            )\n        },\n\n        /**\n         * Update transaction\n         */\n        update({ commit }, transaction) {\n            return TransactionService.updateTransaction(transaction).then(\n                feedback => {\n                    let transaction = feedback.data;\n                    commit('updatedTransaction', transaction);\n                    return Promise.resolve(feedback);\n                },\n                fail => {\n                    return Promise.reject(fail);\n                }\n            )\n        },\n\n        /**\n         * Delete transaction\n         */\n        delete({ commit }, transaction) {\n            return TransactionService.deleteTransaction(transaction.id).then(\n                feedback => {\n                    let transaction = feedback.data;\n                    commit('deletedTransaction', transaction.id);\n                    return Promise.resolve(feedback);\n                },\n                fail => {\n                    return Promise.reject(fail);\n                }\n            )\n        },\n\n        /**\n         * Get transactions\n         * \n         */\n        status({ commit }) {\n            return TransactionService.getTransactionStatus().then(\n                feedback => {\n                    commit('transactionStatus', feedback.data)\n                    return Promise.resolve(feedback)\n                },\n                fail => {\n                    return Promise.reject(fail)\n                }\n            );            \n        },\n\n        /**\n         * Get transaction types\n         * \n         */\n        types({ commit }) {\n            return TransactionService.getTransactionTypes().then(\n                feedback => {\n                    commit('transactionTypes', feedback.data)\n                    return Promise.resolve(feedback)\n                },\n                fail => {\n                    return Promise.reject(fail)\n                }\n            );            \n        },\n\n        /**\n         * Get transaction methods\n         * \n         */\n        methods({ commit }) {\n            return TransactionService.getTransactionMethods().then(\n                feedback => {\n                    commit('transactionMethods', feedback.data)\n                    return Promise.resolve(feedback)\n                },\n                fail => {\n                    return Promise.reject(fail)\n                }\n            );            \n        },\n\n    },\n    mutations: {\n\n        /**\n         * Store transaction list\n         * \n         */\n        transactionList(state, list) {\n           state.list = list\n        },\n\n        /**\n         * Store created transaction\n        */\n       createdTransaction(state, transaction) {\n            state.list.push(transaction);\n       },\n\n        /**\n         * Update transaction\n         */\n        updatedTransaction(state, updatedTransaction) {\n            let transactionIndex = state.list.findIndex(transaction => transaction.id === updatedTransaction.id)\n            if(transactionIndex !== -1) {\n                state.list.splice(transactionIndex, 1, updatedTransaction)\n            }\n        },\n\n        /**\n         * Remove deleted transaction\n         */\n        deletedTransaction(state, transactionID) {\n            let transactionIndex = state.list.findIndex(transaction => transaction.id === transactionID)\n            state.list.splice(transactionIndex, 1)\n        },\n\n        /**\n         * Store transaction status\n         * \n         */\n        transactionStatus(state, list) {\n            state.status = list\n        },\n\n        /**\n         * Store transaction types\n         * \n         */\n        transactionTypes(state, list) {\n            state.types = list\n        },\n\n        /**\n         * Store transaction methods\n         * \n         */\n        transactionMethods(state, list) {\n            state.methods = list\n        },\n    }\n}"]}]}